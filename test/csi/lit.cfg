# -*- Python -*-

import glob
import os

# Setup config name.
config.name = 'ComprehensiveStaticInstrumentation' + config.name_suffix

# Setup source root.
config.test_source_root = os.path.dirname(__file__)

# Setup default compiler flags used with -fcsi option.
base_cflags = ([config.target_cflags] + config.debug_info_flags)
base_cxxflags = config.cxx_mode_flags + base_cflags

llvm_link = os.path.join(config.llvm_tools_dir, "llvm-link")

csi_libdir = os.path.join(config.test_source_root, "..", "..", "lib", "csi")
csi_rt_lib = os.path.join(config.compiler_rt_libdir, "libclang_rt.csi-%s.a" % config.target_arch)
csi_testtoolsdir = os.path.join(config.test_source_root, "tools")
csi_testsupportdir = os.path.join(config.test_source_root, "support")

csi_tool_cflags = (["-g", "-O0", "-c", "-emit-llvm", "-I" + csi_libdir] + base_cflags)
csi_compile_cflags = (["-g", "-O0", "-c", "-fcsi", "-emit-llvm", "-I" + csi_libdir] + base_cflags)
csi_cflags = (["-g", "-O0", "-flto", "-fuse-ld=gold"] + base_cflags)

def build_invocation(compile_flags):
  return " " + " ".join([config.clang] + compile_flags) + " "

config.substitutions.append(("%clang_csi ",
                             build_invocation(csi_cflags)))
config.substitutions.append(("%link_csi ",
                             llvm_link + " "))
config.substitutions.append(("%clang_csi_c ",
                             build_invocation(csi_compile_cflags)))
config.substitutions.append(("%clang_csi_toolc ",
                             build_invocation(csi_tool_cflags)))
config.substitutions.append(("%tooldir", csi_testtoolsdir))
config.substitutions.append(("%supportdir", csi_testsupportdir))
config.substitutions.append(("%csirtlib", csi_rt_lib))

# Default test suffixes.
config.suffixes = ['.c', '.cpp']

# Ignore 'tools- and 'support'
config.excludes.update(map(os.path.basename, glob.glob(os.path.join(csi_testtoolsdir, "*"))))
config.excludes.update(map(os.path.basename, glob.glob(os.path.join(csi_testsupportdir, "*"))))

# CSI tests are currently supported on Linux x86-64 only.
if config.host_os not in ['Linux'] or config.target_arch != 'x86_64':
  config.unsupported = True
